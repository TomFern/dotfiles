#+TITLE: Installing phpMyAdmin on AWS
* Introduction

phpMyAdmin is a popular web-based application to manage MySQL and MariaDB databases.

This article will guide you installing the prerequisites and the application.
We will start by spinning up an EC2 server in AWS. 
Then we'll proceed with a MariaDB database installation, a webserver and phpMyAdmin.
Finally we'll harden the system with SSL and two-factor authentication to keep the bad guys out.

  :LOGBOOK:
  CLOCK: [2019-02-22 Fri 16:45]
  CLOCK: [2019-02-22 Fri 10:43]--[2019-02-22 Fri 12:43] =>  2:00
  CLOCK: [2019-02-22 Fri 10:43]--[2019-02-22 Fri 10:43] =>  0:00
  CLOCK: [2019-02-20 Wed 16:35]--[2019-02-20 Wed 19:11] =>  2:36
  CLOCK: [2019-02-20 Wed 15:10]--[2019-02-20 Wed 16:10] =>  1:00
  CLOCK: [2019-02-20 Wed 12:46]--[2019-02-20 Wed 13:45] =>  1:00
  CLOCK: [2019-02-20 Wed 11:13]--[2019-02-20 Wed 12:41] =>  1:28
  :END:
* Getting started

For this article you'll need:

- a free-tier AWS account
- an ssh client
- a web browser

** Spin up an EC2 instance

Login into the AWS site, pick your preferred datacenter (usually the closest to you or your users) and open the EC2 console.

[[./ec2/ec2_console.png]]

On the sidebar, under /Instances/, click on /Launch Instance/:

[[./ec2/Launch_Instance.png]]

EC2 provides a wide variety of images. 
On the Linux arena, the free tier includes the most popular distributions.
Under the /Community AMIs/ tab, we'll select a Fedora image. 
On the right, set the Fedora checkbox, and under the Search box write "cloud-base gp2 x86" and select the most current Fedora version available (in this case it's version 29).

[[./spinup/AMI_Select.png]]

[[./spinup/AMI_Select2.png]]

Next, we'll be offered to select the machine type. 
There is only one free option for the free-tier accounts: t2.micro, so we'll choose that.
Fortunately, it's more than enough to support phpMyAdmin and a small database. 
If you have higher requirements, pick a better (paid) machine:

[[./spinup/MachineType_Select.png]]

If you're in a hurry you can just click /Review and launch/.
But by continuing with the wizard at this point, we will be able to save us some work later.

Next we can configure the instance and network type, there's no need to change the defaults:

[[./spinup/Configure_Instance.png]]

Next we can set how much storage to assign:

[[./spinup/Storage.png]]

For a basic phpMyAdmin installation 6 GB is more than enough. 
However, if we were to install additional software or bigger database, we would need to add more disk space:


We'll fly past the /Add Tags/ section since we won't be using tags:

[[./spinup/Tags.png]]

On the security group tab we'll add inbound firewall rules. 
We want our instance to be reachable on ports 22 (ssh), 80 (http) and 443 (HTTPS).

Click on the /Add Rule/ button and select HTTP from the dropdown menu. 
Hit /Add Rule/ again and select HTTPS.
If you want to limit access from certain IPs, you can type the IP ranges in /Source/. 
Otherwise, we can leave 0.0.0.0/0 to allow all connections.
Take note of the /Security group name/, we'll need that later.

[[./spinup/AddRules.png]]

Finally we are presented with a summary page for our new instance, after checking everything is in order we can /Launch/ it.

[[./spinup/ReviewLaunch.png]]

Only one more step left. 
We need some way of accessing the instance once running.
AWS presents us the option to generate an ssh key.
If you already had one generated, you can choose from the dropdown menu. 
Otherwise, we can just generate a new pair and download it. 

Save the file in a *secure place* and don't lose it. The file can only be downloaded once.

[[./spinup/GenerateKeys.png]]

** Connecting to the instance

Head back to the EC2 console, under /Instances/ you'll see the new instance starting up. After a few minutes it should read as /Running/:

[[./spinup/Running.png]]

Set the checkbox for the instance and hit the /Connect/ button. 
You'll be presented with an overlay with connection instructions. 
Take note of the server IP address and full name (FQDN). 
In this case the full name we got was "ec2-18-225-10-198.us-east-2.compute.amazonaws.com".

[[./spinup/ConnectSSH.png]]

Following the instructions, we open a terminal and execute the steps as described:

#+BEGIN_EXAMPLE shell
# notice that the correct use to login is "fedora"
$ chmod 400 my_ec2_key.pem
$ ssh -i "my_ec2_key.pem" fedora@ec2-18-225-10-198.us-east-2.compute.amazonaws.com
The authenticity of host 'ec2-18-225-10-198.us-east-2.compute.amazonaws.com (18.225.10.198)' can't be established.
ECDSA key fingerprint is SHA256:aB5Nfbi6pYHop9XiiNXm05On0eeszQ4DjyLBIk/H+G0.
Are you sure you want to continue connecting (yes/no)? yes
#+END_EXAMPLE

Welcome to your new instance. 
The /fedora/ user has /sudo/ permissions, we'll use it to setup our system.

The first thing to do on this new instance is to update it. 
It's the perfect opportunity since we don't have any services running yet.

#+BEGIN_EXAMPLE shell
# update and reboot
sudo dnf update -y
sudo dnf install nano -y
sudo systemctl reboot
#+END_EXAMPLE

After rebooting the instance, wait for a few seconds and log in again. 

* Installing prerequisites

We'll start by installing the rest of the components of a LAMP stack: the database, a web server and php.

** Install & secure MariaDB

# If we already have a MariaDB or MySQL server running somewhere else and we want to manage it, this steps is optional.
# We'll need to modify the phpmyadmin config afterwards.

Install MariaDB and start the service:

#+BEGIN_EXAMPLE shell
$ sudo dnf install mariadb-server.x86_64 mariadb -y
$ sudo systemctl enable --now mariadb
#+END_EXAMPLE

Right now the database is unsecured: the root user doesn't have a password.
Use a strong password for root and create an admin user for phpmyadmin:

#+BEGIN_EXAMPLE shell
$ mysql -u root
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 398
Server version: 10.3.11-MariaDB MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> ALTER USER 'root'@'localhost' IDENTIFIED BY 'SuperSecretPassword';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> ALTER USER 'root'@'127.0.0.1' IDENTIFIED BY 'SuperSecretPassword';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> ALTER USER 'root'@'::1' IDENTIFIED BY 'SuperSecretPassword';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> CREATE USER 'phpmyadmin'@'localhost' IDENTIFIED BY 'SuperPassword1';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> GRANT ALL PRIVILEGES ON *.* TO 'phpmyadmin'@'localhost' WITH GRANT OPTION;
Query OK, 0 rows affected (0.000 sec)
#+END_EXAMPLE

Choose good passwords and *save* them somewhere secure. We'll need them afterwards.

** Install a webserver

We'll need a web server to host our application. 
To keep things simple, we'll only cover two of the most popular options: Apache and nginx.

You'll have to decide which one install. You need only one webserver.

To install nginx:

#+BEGIN_EXAMPLE shell
sudo dnf install nginx -y
sudo systemctl enable --now nginx
#+END_EXAMPLE

Altenatively install Apache using:

#+BEGIN_EXAMPLE shell
$ sudo dnf install httpd -y
$ sudo systemctl enable --now httpd
#+END_EXAMPLE

We'll circle back to the webserver configuration soon.
For now it's good enough that it is running.

Open a browser and navigate to the server address.
If everything is ok, we should see a test page:

[[./setup/nginx_test.png]]

** Installing phpMyAdmin

Since phpMyAdmin is included on Fedora's repositories, 
we can install it directly and it will automatically pull php and all other required packages.

#+BEGIN_EXAMPLE shell
$ sudo dnf install phpmyadmin -y
#+END_EXAMPLE

The following steps depend on your earlier choice for webserver.

*** Running phpMyAdmin with nginx

We'll only need to link the phpMyAdmin directory to the nginx root.

#+BEGIN_EXAMPLE shell
$ sudo ln -s /usr/share/phpMyAdmin /usr/share/nginx/html/phpmyadmin
$ sudo systemctl restart nginx
#+END_EXAMPLE

Restart nginx:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart nginx
#+END_EXAMPLE


# sudo nano /etc/nginx/nginx.conf

# Locate the ~server~ block, add a ~location /phpmadmin {~ block:

#    server {
#         listen       80 default_server;
#         listen       [::]:80 default_server;
#         server_name  _;
#         root         /usr/share/nginx/html;

#         include /etc/nginx/default.d/*.conf;

#         location / {
#         }

#         # --> add the following 3 lines <--
#         location /phpmyadmin {
#             root /usr/share/phpMyAdmin;
#         }


# ~root /usr/share/nginx/html;~ replace it with ~/usr/share/phpMyAdmin;~

#     server {
#         listen       80 default_server;
#         listen       [::]:80 default_server;
#         server_name  _;
#         #root         /usr/share/nginx/html; # <- replace this line
#         root /usr/share/phpMyAdmin;

# Restart nginx

# sudo systemctl restart nginx

*** Running phpMyAdmin in Apache

phpMyAdmin package ships with a configuration file for Apache. 
However, you won't be able to access phpMyAdmin from your browser yet because 
it will only allow local connections by default. 
Since we are running an instance on the cloud, this isn't of much use to us.

To allow connections from the outside, edit the phpMyAdmin config file:

#+BEGIN_EXAMPLE shell
$ sudo nano /etc/httpd/conf.d/phpMyAdmin.conf
#+END_EXAMPLE

Look for all the blocks with ~Require ip 127.0.0.1~. 
On each of those blocks add a line that reads: ~Require all granted~.

Next find all lines with ~Deny from all~. Replace those lines with ~Allow from all~

The end result should be:

#+BEGIN_EXAMPLE
<Directory /usr/share/phpMyAdmin/setup/>
   <IfModule mod_authz_core.c>
     # Apache 2.4
     <RequireAny>
       # Added next line
       Require all granted
       # Require ip 127.0.0.1
       # Require ip ::1
     </RequireAny>
   </IfModule>
   <IfModule !mod_authz_core.c>
     # Apache 2.2
     Order Deny,Allow
     # Deny from All <- replace this line
     Allow from all
   ....
#+END_EXAMPLE

You will need to add each line twice.

Restart the Apache:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart httpd
#+END_EXAMPLE

*** Test phpMyAdmin on your browser

You should be able to access phpmyadmin from your browser on [[http://<YOUR_SERVER_ADDRESS>/phpmyadmin]]

[[./setup/LoginScreen.png]]

We now have a basic yet fully working phpMyAdmin installation.
You may be tempted to start using it now. 
Don't,the current setup is quite unsafe as it is.
There's still work ahead before we can claim our system is secured.

* Harden your setup

Our phpMyAdmin is working. However, it has some serious security issues:

- No encryption: communication between the browser and phpMyAdmin is not encrypted. Everything, including passwords, is send in clear text.
- Password: there is only one password between an attacker and the database. 

** Installing a Letsencrypt certificate

If you already own a domain, [[https://letsecnrypt.org][Letsencrypt]] can provide free certificates for it.
~certbot~ makes the process of acquiring one quick and easy.

*** Prerequisites

# Can't use an AWS domain (blacklisted by letsecrypt), you need to use your own domain here.

- A domain: Letsencrypt doesn't support AWS domains (*.amazonaws.com). You'll need to get your own domain name from a registrar.
- DNS Records: You'll need to be able to configure your domain type A records. 

To set up your DNS records:

1. Go to your registrar or DNS provider site.
2. Create an A type record: for example if your domain is *example.com*, add A record such as *www* (www.example.com)
3. Point the new record to your EC2 public IP

The rest of the steps depend on the webserver you're running.

*** Create certificate for nginx

Edit the nginx configuration:

#+BEGIN_EXAMPLE shell
$ sudo nano /etc/nginx/nginx.conf
#+END_EXAMPLE

Inside the ~server~ block, locate the line that reads ~server_name  _;~. Write your domain address:

#+BEGIN_EXAMPLE shell
    server {
        #server_name  _; # <- replace the _ with the address
        server_name www.example.com;
#+END_EXAMPLE

Restart nginx:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart nginx
#+END_EXAMPLE

Install certbot for nginx:

#+BEGIN_EXAMPLE shell
$ sudo dnf install certbot certbot-nginx -y
#+END_EXAMPLE

Run certbot to create the certificate. 
It'll pick the correct domain name automatically from the nginx config.
Follow the instructions:

#+BEGIN_EXAMPLE shell
$ sudo certbot --nginx

Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx

Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: www.example.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel):
Deploying Certificate to VirtualHost /etc/nginx/nginx.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
Redirecting all traffic on port 80 to ssl in /etc/nginx/nginx.conf

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://www.example.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=admin.tomfern.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/admin.tomfern.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/admin.tomfern.com/privkey.pem
   Your cert will expire on 2019-05-23. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
#+END_EXAMPLE

*** Letsencrypt Certificate for Apache

Installing a Letsencrypt certificate for Apache is also very easy:

Create a config file for Apache:

#+BEGIN_EXAMPLE shell
sudo nano /etc/httpd/conf.d/00-mydomain.conf
#+END_EXAMPLE

Add the following lines to the empty file. Make sure you set you own domain name in ~ServerName~ and ~ServerAlias~:

#+BEGIN_EXAMPLE
<VirtualHost *:80>
ServerName www.example.com
ServerAlias *.example.com
</VirtualHost>
#+END_EXAMPLE

Restart Apache:

#+BEGIN_EXAMPLE shell
sudo systemctl restart httpd
#+END_EXAMPLE

Install certbot for Apache:

#+BEGIN_EXAMPLE shell
sudo dnf install certbot certbot-apache -y
#+END_EXAMPLE

Certbot will automatically get the domain name from Apache:

#+BEGIN_EXAMPLE shell
$ sudo certbot --apache                     
Saving debug log to /var/log/letsencrypt/letsencrypt.log        
Plugins selected: Authenticator apache, Installer apache
                                                                            
Which names would you like to activate HTTPS for?                     
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: www.example.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel):
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for www.example.com
Waiting for verification...
Cleaning up challenges
Created an SSL vhost at /etc/httpd/conf.d/00-mydomain-le-ssl.conf
Deploying Certificate to VirtualHost /etc/httpd/conf.d/00-mydomain-le-ssl.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
Redirecting vhost in /etc/httpd/conf.d/00-mydomain.conf to ssl vhost in /etc/httpd/conf.d/00-mydomain-le-ssl.conf

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://www.example.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=www.example.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/www.example.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/www.example.com/privkey.pem
   Your cert will expire on 2019-05-23. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
#+END_EXAMPLE

*** Browse your site in HTTPS

Once done, test your new certificate. Navigate to the HTTPS version of your site: https://www.example.com/phpmyadmin

Verify the validity of the site ceritificate.

** Generating a self-signed certificate 

If you don't have your own domain, or are not interested in using it on this site, 
you may use a self-signed certificate. 
You'll get a security warning from your browser, but still this is far better than
not using any encryption at all.

Install openssl:

#+BEGIN_EXAMPLE shell
$ sudo dnf install openssl -y
#+END_EXAMPLE

Generate an SSL key, we'll use a 2048 bit key:

#+BEGIN_EXAMPLE shell
$ openssl genrsa -out localhost.key 2048
#+END_EXAMPLE

To create a certificate, the tool will ask for some information. 
The most important thing to get right is the Common Name: it must match exactly your server address (FQDN), e.g.: 
ec2-18-225-10-198.us-east-2.compute.amazonaws.com

#+BEGIN_EXAMPLE shell
$ openssl req -new -key localhost.key -out localhost.csr -sha512

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:California
Locality Name (eg, city) []:Los Angeles
Organization Name (eg, company) [Internet Widgits Pty Ltd]:SuperMegaStore
Organizational Unit Name (eg, section) []:Financial Services
Common Name (e.g. server FQDN or YOUR name) []:ec2-18-225-10-198.us-east-2.compute.amazonaws.com
Email Address []:info@supermegastore.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
#+END_EXAMPLE

Sign the certificate, it will be valid for the next 1000 days:

#+BEGIN_EXAMPLE shell
$ openssl x509 -req -days 1000 -in localhost.csr -signkey localhost.key -out localhost.crt -sha512
#+END_EXAMPLE

*** Install certificate on nginx

Copy the keys into nginx config directory:

#+BEGIN_EXAMPLE shell
$ sudo mkdir -p /etc/nginx/ssl
$ sudo cp localhost.crt /etc/nginx/ssl
$ sudo cp localhost.key /etc/nginx/ssl

$ sudo chown root:root /etc/nginx/ssl/localhost.key
$ sudo chown root:root /etc/nginx/ssl/localhost.crt

$ sudo chmod 0600 /etc/nginx/ssl/localhost.key
$ sudo chmod 0600 /etc/nginx/ssl/localhost.crt

$ sudo restorecon -RvF /etc/nginx/ssl
#+END_EXAMPLE

Edit nginx config. Locate the ~server { ... }~ block. Add following lines inside the block:

#+BEGIN_EXAMPLE
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost.key;
#+END_EXAMPLE

Restart nginx:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart nginx
#+END_EXAMPLE

*** Install on Apache

Install the Apache SSL module:

#+BEGIN_EXAMPLE shell
$ sudo dnf install mod_ssl -y
#+END_EXAMPLE

Copy the key and certificate files to the Apache directories:

#+BEGIN_EXAMPLE shell
sudo cp localhost.crt /etc/pki/tls/certs
sudo cp localhost.key /etc/pki/tls/private

sudo chown root:root /etc/pki/tls/private/localhost.key
sudo chown root:root /etc/pki/tls/certs/localhost.crt

sudo chmod 0600 /etc/pki/tls/private/localhost.key
sudo chmod 0600 /etc/pki/tls/certs/localhost.crt

sudo restorecon -RvF /etc/pki
#+END_EXAMPLE

Restart Apache service:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart httpd
#+END_EXAMPLE

*** Test HTTPS

Direct your browser to the HTTPS version of the site, e.g.: [[
https://ec2-18-225-10-198.us-east-2.compute.amazonaws.com/phpmyadmin

You'll get a security warning on the browser:

[[./setup/BrowserWarning.png]]

Once accepted you should be get the phpMyAdmin login page.

** Block HTTP access

One you've tested that HTTPS is working, you should block HTTP connections to your server.
Head to the EC2 console, on the sidebar click on /Security Groups/ under the /Network & Security/ section:

[[./setup/SecurityGroup.png]]

Select from the security group list the entry that corresponds to the instance: 

[[./setup/SelectGroup.png]]

Click on the /Inbound/ and hit the /Edit/ button:

[[./setup/EditGroup.png]]

Remove the http entry and save:

[[./setup/RemoveHttp.png]]

** Enable two-factor authentication

We can harden the phpMyAdmin with two-factor authentication.
This enhances the security of the login process so even if attackers knows the password, they won't be able to access the system.

In order to use two-factor authentication (2FA), you'll need to install an authenticator app on your phone, e.g Google Authenticator, Microsoft Authenticator, etc.

To enable 2FA on phpMyAdmin go to /Settings/ -> /Warnings/. Disable the option "Missing phpMyAdmin configuration storage tables" and hit /Apply/:

[[./2fa/Settings.png]]

Go to /Databases/ and create a new database called phpmyadmin:

[[./2fa/CreateDatabase.png]]

Select the new database from the sidebar. Go to /Operations/ and click on the "find out why" link:

[[./2fa/Operations.png]]

Click on the "Create" link. It will initialize the phpmyadmin database with special tables.

[[./2fa/InstallStorage.png]]

Go back to /Settings/ and click on /Two factor authentication/. 
Choose /Authentication application (2FA)/:

[[./2fa/setup.png]]

Open your authenticator app on the phone, set it up by taking a picture of the QR code or typing the secret key. 
Write the numbers shown on the phone to continue:

[[./2fa/sync.png]]

Now logout and try to login again. 
After typing the user and password you will be asked to type the security token on your phone.

[[./2fa/challenge.png]]

* Common issues
** Cant' create Letsencrypt certificate 

If you get an error similar to:

#+BEGIN_EXAMPLE shell
Failed authorization procedure. www.example.com (http-01): urn:ietf:params:acme:error:connection
The server could not connect to the client to verify the domain :: dns :: DNS problem: NXDOMAIN
#+END_EXAMPLE

This means your domain A records are not correctly set. If you have recently updated them wait for a few minutes and try again.
Some DNS providers can take up to a few hours to make the changes available.

** The site certificate doesn't work


Make sure that the permissions and security context for the certificate files are correct.

#+BEGIN_EXAMPLE shell
# for nginx
$ sudo chown root:root /etc/nginx/ssl/localhost.key
$ sudo chown root:root /etc/nginx/ssl/localhost.crt

$ sudo chmod 0600 /etc/nginx/ssl/localhost.key
$ sudo chmod 0600 /etc/nginx/ssl/localhost.crt

$ sudo restorecon -RvF /etc/nginx/ssl

# for Apache
$ chown root:root /etc/pki/tls/private/mycert.key
$ chown root:root /etc/pki/tls/certs/mycert.crt

$ chmod 0600 /etc/pki/tls/private/mycert.key
$ chmod 0600 /etc/pki/tls/certs/mycert.crt

$ restorecon -RvF /etc/pki
#+END_EXAMPLE

Review your Apache or nginx configuration files. Both of them have an SSL certificate entry that should point to the correct key and certificate files.

# Edit your Apache SSL config file:

# #+BEGIN_EXAMPLE shell
# $ sudo nano /etc/httpd/conf.d/ssl.conf
# #+END_EXAMPLE

# Locate the lines that start with SSLCertificate, check that the path of the files are correct.

# #+BEGIN_EXAMPLE shell
# SSLCertificateFile /etc/pki/tls/certs/mycert.crt 
# SSLCertificateKeyFile /etc/pki/tls/private/mycert.key 
# #+END_EXAMPLE

# Restart Apache service:

# #+BEGIN_EXAMPLE shell
# $ sudo systemctl restart httpd
# #+END_EXAMPLE

** Can't find correct fedora image

AWS provides a lot of Linux images to use, finding the best one isn't always so simple. 
Fortunately, fedora provides a site that links to the latest images to use directly on AWS:
[[https://alt.fedoraproject.org/cloud/]]

Scroll down to /Fedora cloud images for Amazon Public Cloud/ and pick /GP2 HVM AMIs/

[[./trouble/FedoraAMI.png]]

You'll get a list of the available datacenters, choose the best one for you:

[[./trouble/DCList.png]]

** Database connection fails

If phpMyAdmin fails to connect to the database, edit the phpMyAdmin config:

#+BEGIN_EXAMPLE shell
$ sudo nano /etc/phpMyAdmin/config.inc.php
#+END_EXAMPLE

You'll find that the configuration is written in PHP. Locate the lines that deal with the server address:

#+BEGIN_EXAMPLE php
  $cfg['Servers'][$i]['host']          = 'localhost'; // MySQL hostname or IP address
  $cfg['Servers'][$i]['port']          = '';          // MySQL port - leave blank for default port
  $cfg['Servers'][$i]['socket']        = '';          // Path to the socket - leave blank for default socket
#+END_EXAMPLE

Check that host, port and socket are correct for your setup. 

The default configuration should work for a local MySQL database with default port or socket path.

Restart Apache after changing the config:

#+BEGIN_EXAMPLE shell
$ sudo systemctl restart httpd
#+END_EXAMPLE

** Access denied to the database

Open a connection to your database:

#+BEGIN_EXAMPLE shell
MariaDB [(none)]> select User,host from mysql.user;
+-------------+---------------------------------------------+
| User        | host                                        |
+-------------+---------------------------------------------+
| root        | 127.0.0.1                                   |
| root        | ::1                                         |
| root        | ip-172-31-38-102.us-east-2.compute.internal |
| phpmyadmin  | localhost                                   |
| root        | localhost                                   |
+-------------+---------------------------------------------+
5 rows in set (0.000 sec)
#+END_EXAMPLE

This is the list of users with access to the database. 
Not only the user and password must be correct, but also the incoming connection must be initiated from the listed host.

If phpMyAdmin and the database are located on different servers, 
you'll have to create a user on the database that is allowed to connect from the remote IP.

For example: if your phpMyAdmin machine has the IP 1.2.3.4 the user must be created as follows:

#+BEGIN_EXAMPLE sql
MariaDB [(none)]> CREATE USER 'phpmyadmin'@'1.2.3.4' IDENTIFIED BY 'SuperPassword1';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> GRANT ALL PRIVILEGES ON *.* TO 'phpmyadmin'@'1.2.3.4' WITH GRANT OPTION;
Query OK, 0 rows affected (0.000 sec)
#+END_EXAMPLE

** Remove two-factor authentication

If you ever loose your phone, you won't be able to access the site. 
The easiest way to remove two-factor setup is to delete the phpmyadmin schema on the database.

Login to the server using ssh, connect to you mysql database and drop the schema:

#+BEGIN_EXAMPLE sql
MariaDB [(none)]> drop schema phpmyadmin;
#+END_EXAMPLE

* References

- phpMyAdmin
  - https://docs.phpmyadmin.net/en/latest/index.html
  - https://docs.phpmyadmin.net/en/latest/two_factor.html#authentication-application-2fa
- MariaDB
  - https://mariadb.com/kb/en/library/documentation/
- Fedora
  - https://getfedora.org
  - https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-apache-http-server/
  - https://fedoraproject.org/wiki/Nginx
- Certificates
  - https://www.openssl.org/
  - https://certbot.eff.org/lets-encrypt/fedora-nginx.html
  - https://certbot.eff.org/lets-encrypt/fedora-apache.html
  
* Conclusion

It took some effort, but we succesfully got a secure phpMyAdmin site working to easily manage our MySQL and MariaDB databases.
