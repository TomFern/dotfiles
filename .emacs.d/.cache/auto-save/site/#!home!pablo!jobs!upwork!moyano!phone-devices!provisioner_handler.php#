<?php 

    // fwrite($fp_debug, "Include Provisioner library");

    //define('WRITE_DIR', '');
    #define('PROVISIONER_BASE', '/var/www/html/Provisioner/'); //Location to the root directory where you unpackaged provisioner,
    define('PROVISIONER_BASE', 'Provisioner/'); //Location to the root directory where you unpackaged provisioner,
    require(PROVISIONER_BASE.'includes/json.php'); //Required for PHP less than 5.3
    require_once(PROVISIONER_BASE.'autoload.php'); //Load the autoloader (there is another way to do this if the autoloader doesn't work

    $fp_debug = fopen('debug/provision_handler.log', 'w') or die ("Error opening file in write mode!"); 
    $fp_debug_phonedata = fopen('debug/provision_phonedata.json','w');
    
    // fwrite($fp_debug, "Get mac address from rewrite \n");
    $mac = str_replace('spa', '', $_GET['mac']);
    $mac = strtolower($mac);
    
    (!empty($mac)) ? fwrite($fp_debug, "Store mac address ($mac) -success \n") : fwrite($fp_debug, "Store mac address ($mac) -error \n");
    
    /**
    *  default PROVISIONER_BASE == /var/www/html/provisioning.istn.us/ 
    */


    fwrite($fp_debug, " - success \n");
    if (!class_exists("DateTimeZone")) { require(PROVISIONER_BASE.'samples/tz.php'); }

    /**
    * Connect DB
    * Fetch data where MAC == $mac
    * 
    */
    fwrite($fp_debug, "Call database query using curl");
    
    //    $url = "http://devweb.itaki.net/p_query?method=get&macid=$mac";
    $url = "http://devweb.peachtel.net/p_query?method=get&macid=$mac";
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    $data = curl_exec($ch);

    curl_close($ch); 

    $newdata = (array) json_decode($data);
    // fwrite($fp_debug_phonedata,json_encode($newdata));
    foreach($newdata['Phonedata'] as $key => $pd) {
        $newdata['Phonedata'][$key] = (array) $pd;
    }
    fwrite($fp_debug_phonedata,json_encode($newdata));
    fwrite($fp_debug, " - success \n");
    fwrite($fp_debug, "Url for curl is: $url \n");

    /* Uncomment to see data of mac */
//    echo "<pre>";
//    print_r($newdata);
//    echo "</pre>";
    
    $brand = strtolower($newdata['Phonedata'][0]['Brand']); //Brand, also the first directory under endpoint
    $family = $newdata['Phonedata'][0]['Family']; //family, the directory under said brand which contains a group of phones
    $model = $newdata['Phonedata'][0]['FriendlyName']; //model name from family_data.json, must match exactly from family_data.json

    $class = "endpoint_" . $brand . "_" . $family . '_phone';
    fwrite($fp_debug, "Try instance object of class: $class \n");
    $endpoint = new $class();

    fwrite($fp_debug, "writing family brand and model : $brand, $family, $model");
    //have to because of versions less than php5.3
    $endpoint->brand_name = $brand;
    $endpoint->family_line = $family;
    $endpoint->model = $model;

fwrite($fp_debug, " - success \n");
    #$endpoint->engine = 'asterisk';
    #$endpoint->engine_location = '/bin/asterisk';
    #$endpoint->system = 'unix';

    $fp_debugath="../Provisioner/firmware"; // provisioning.istn.us


    if(1) {
        
        fwrite($fp_debug, "Insert data to generate files");
        $endpoint->mac = $mac;
        
        //Processor Information, tagged to the top of most configuration files
        $endpoint->processor_info = "Itaki Network's Provisioner";

        if (!class_exists("DateTimeZone")) { require('Provisioner/includes/timezone.php'); }
        $endpoint->DateTimeZone = new DateTimeZone($newdata['Phonedata'][0]['DateTimeZone']);

        $endpoint->settings['network']['dhcp'] = TRUE;
        $endpoint->settings['network']['ipv4'] = '';
        $endpoint->settings['network']['ipv6'] = '';
        $endpoint->settings['network']['subnet'] = '255.255.255.0';
        $endpoint->settings['network']['gateway'] = '';
        $endpoint->settings['network']['primary_dns'] = '1.1.1.1';
        $endpoint->settings['network']['Secondary_dns'] = '2.2.2.2';
        $endpoint->settings['network']['syslog_server'] = '3.3.3.3';
        $endpoint->settings['network']['vlan']['id'] = '';
        $endpoint->settings['network']['vlan']['qos'] = '';
        $endpoint->settings['network']['local_port'] = '';

        $i = 0;
        foreach($newdata['Phonedata'] as $pd) {
            if($i > 0) {
                $endpoint->settings['line'][$i - 1] = array( 
                    'line_enabled' => 'on',
                    'line' => $pd['Register'],
                    'displayname' => $pd['DisplayName'],
                    'username' => $pd['Username'],
                    'authname' => $pd['Authname'],
                    'secret' => $pd['Password'],
                    'server_host' => $pd['ServerHost'],
                    'server_port' => $pd['ServerPort'],
                    'server_expires' => $pd['ServerExpires'],
                    'backup_server_host' => 'pbx.itaki.net',
                    'backup_server_port' => 5060,
                    'backup_server_expires' => 3600,
                    'use_outbound_proxy' => 'on',
                    'outbound_host' => $pd['OutboundHost'],
                    'outbound_port' => $pd['OutboundPort'],
                    'backup_outbound_host' => $pd['BackupOutboundHost'],
                    'backup_outbound_port' => $pd['BackupOutboundPort'],
                    'stun_server_host' => '',
                    'stun_server_port' => '',
                    'transport' => $pd['Transport'],
                    'nat_traversal' => $pd['NatTraversal'],
                    'rport_enable' => $pd['RPortEnable'],
                    'udp_keepalive_enable' => $pd['UDPKeepAliveEnable'],
                    'udp_keepalive_seconds]' => $pd['UDPKeepAliveInterval'],
                    'sip_registration_retry_timer' => $pd['SIPRegistrationRetryTimer'],
                    'first_audio_codec' => $pd['FirstPreferredAudioCodec'],
                    'second_audio_codec' => $pd['SecondPreferredAudioCodec'],
                    'third_audio_codec' => $pd['ThirdPreferredAudioCodec'],
                );
                
            }
            $i++;
        }

        $endpoint->settings['ntp'] = '0.pool.ntp.org';

        
        $endpoint->settings['provision']['type'] = 'dynamic';
        
        $endpoint->settings['provision']['protocol'] = 'http';
        $endpoint->settings['provision']['path'] = 'http://p.provisioner.net/';
        $endpoint->settings['provision']['encryption'] = FALSE;
        
        
        if(isset($newdata['Phonedata'][0]['lineOptions'])) {
            $lineOptions = json_decode($newdata['Phonedata'][0]['lineOptions'], TRUE);
            $endpoint->settings = array_merge($endpoint->settings, $lineOptions);
        }


        fwrite($fp_debug, " - success \n");
        
        
        fwrite($fp_debug, "generate config files");
        try {
            $returned_data = $endpoint->generate_all_files();
            fwrite($fp_debug, " - success \n");
        } catch (Exception $e) {
            echo 'failed';
            fwrite($fp_debug, " - error \n ".$e->getMessage());
            return;
        }
        
    }
    
    
    
    
    
    fwrite($fp_debug, "Begin write files in gen_files folder \n");
    
    foreach ($returned_data as $file => $data) {
        fwrite($fp_debug, "Writing data in {$file}");
        if($file == $mac.'_reg.cfg' && $brand == 'polycom') {
            $xmls = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>';
            $data = str_replace(array($xmls), '', $data);
            $data = $xmls.$data;
        }
        if(file_put_contents($file, $data)) {
            
            fwrite($fp_debug, " - success \n");
        } else {
            fwrite($fp_debug, " - error \n");
        }
    }
    
    if(isset($returned_data[$mac.'.cfg'])) {
        $result = $returned_data[$mac.'.cfg'];
    } else if(isset($returned_data[$mac.'.xml'])) {
        $result = $returned_data[$mac.'.xml'];
    } else if(isset($returned_data["spa".$mac.'.xml'])) {
        $result = $returned_data["spa".$mac.'.xml'];
    }
    
    fwrite($fp_debug, "Return {$mac}.cfg to phone \n");
            
    if(isset($result) && !empty($result) && isset($_GET['from_script'])) {
        echo "passed";
        return;
    }

    //$xml = simplexml_load_file($returned_data[$mac.'.cfg']);
    
    print $result;
    fwrite($fp_debug,$result);
    fwrite($fp_debug,"\nDONE\n");
    
    fwrite($fp_debug, "FINISHED - PROVISIONING");
    fclose($fp_debug);
    
    /**
    #fwrite($fp_debug, simplexml_load_string($returned_data[$mac.'.cfg']));
    fclose($fp_debug);
     * 
     */
    

?>
