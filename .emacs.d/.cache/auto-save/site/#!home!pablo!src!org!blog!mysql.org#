* DONE Unused indexes cleanup
  CLOSED: [2018-09-04 Tue 16:45]

Indexes are great but I find it's quite common to be in a situation where there are too many. Maybe application requirements changed, or some parts where replaced by others.
 I had this server with was overcrowded with indexes. People were creating indexes left and right, not understanding that you can have too many indexes.

The question was: which indexes are being used and which were just taking up space and degrading performance, not helping anyone?

If you search the internets for removing unused MySQL indexes you'll probably find that there is a view in *sys* schema which is very handy:

select * from sys.schema_unused_indexes;

Bear in mind, this will only work if you have the performance_schema feature enabled.

The MySQL Documentation has this to say (MySQL 5.7)

The schema_unused_indexes View

These views display indexes for which there are no events, which indicates that they are not being used. By default, rows are sorted by schema and table.

This view is most useful when the server has been up and processing long enough that its workload is representative. Otherwise, presence of an index in this view may not be meaningful. 


So, it seems to I only need to ensure the server has been running for some time before using the view. So easy! I should've known, things are never easy.

So I naively started to use this view to delete indexes. My workflow was something like this:

select * from sys.schema_unused_indexes where object_schema = 'my_overindexed_db';

Choose some 2 or 3 likely indexes to delete. 

Delete them. 

Run the view again

Repeat

At first I was being cautious, deleting indexes that where obviously not being used by anyone. But after some time I got somewhat excited and trigger happy, after all, the server was telling me that now one has used this indexes, so it's safe, right?

To make a long story short, the next day the application team reports slow performance. Strange, I say. I delve into the slow procedures and to my horror I find, that some of the indexes I deleted the day before where indeed needed and being used. What happened? Did the internet lie? How can this be?

Luckyly I keep all my DDL code in a git (LINK). So I was able very quickly to re-create the indexes, the tables were not too big so it didn't take too long.

Crisis averted, now I started wondering what has happened.

So I set up a minilab on my test environment (MySQL 5.7.22 Community)

CREATE SCHEMA indexes;

I create a new innodb table:

CREATE TABLE indexes.whats_the_deal (
	myid int not null auto_increment,
	name varchar(45) not null,
	birthday datetime not null,
	weight smallint null,
	PRIMARY KEY(myid),
	INDEX idx_name (name),
	INDEX idx_birthday (birthday)
);

USE indexes;

INSERT INTO whats_the_deal (name,birthday) VALUES ("Hayley","2018-05-06 12:52:23");
INSERT INTO whats_the_deal (name,birthday) VALUES ("Ciaran","2018-08-27 10:17:49");
INSERT INTO whats_the_deal (name,birthday) VALUES ("Lacey","2019-07-22 22:53:58");
INSERT INTO whats_the_deal (name,birthday) VALUES ("Dai","2018-12-14 17:59:06");
INSERT INTO whats_the_deal (name,birthday) VALUES ("Carson","2019-02-05 14:12:15");



I check the indexes, all are unused.
select * from sys.schema_unused_indexes where object_schema = 'indexes'

object_schema |object_name    |index_name   
--------------|---------------|-------------
indexes       |whats_the_deal |idx_name     
indexes       |whats_the_deal |idx_birthday 

No surprises there, after all this is a new table. Let's try a query that uses idx_birthday

select distinct birthday from indexes.whats_the_deal;

Check again the indexes: idx_birthday is no longer listed as unused. Good.

object_schema |object_name    |index_name 
--------------|---------------|-----------
indexes       |whats_the_deal |idx_name   

Let's try adding a new index to the table

ALTER TABLE indexes.whats_the_deal ADD INDEX idx_weight (weight)

What does the view say now?

select * from sys.schema_unused_indexes where object_schema = 'indexes'

object_schema |object_name    |index_name   
--------------|---------------|-------------
indexes       |whats_the_deal |idx_name     
indexes       |whats_the_deal |idx_birthday 
indexes       |whats_the_deal |idx_weight   

As I suspected, the unused index view has been 'reset'. The counters on the underling table are set to 0 after adding the index. And all indexes are listed as unused again. Seems to me there should be something about this on the documents.

So there you have it. Next time, before messing with the indexes, I'll check the create_time for the relevant table with something like SHOW TABLE STATUS

(EXAMPLE UNUSED INDEX QUERY)

Cheers


* TODO About character sets, speed and size
* TODO Regarding benchmarks between docker and uncontained mysql
* TODO Differences in performance between recent mysql versions
* TODO Benchmarking mysql vs maria vs percona
* TODO Benchmarking innodb, file format, row format, myisam
* TODO Benchmarking tokudb, rocksdb, xtradb
* TODO Benchmarking Fs types, ext4, ext3, ext2, xfs, zfs
