-- benchmark.db v0.0.1
create table software (
	id integer primary key,
	manufacturer text not null,
	product text not null,
	version text not null,
	edition text null,
	constraint uq_product unique (product,version, edition) 
);
create table service (
	id integer primary key,
	id_software integer not null,
	name text not null,
  description text null,
	store text NULL,
	constraint uq_name unique(id_software,name),
	foreign key (id_software) references software(id)
);
create table endpoint (
	id integer primary key,
	id_service integer not null,
	endpoint text not null,
	foreign key (id_service) references service(id)
);
create table machine (
	id integer primary key,
	name text not null,
	provider text null,
	description null
);
create table setup (
	id integer primary key,
	id_machine integer not null,
	id_service integer not null,
	gp text not null,
	alias text not null,
  description text null,
  location text null, 
  on_behalf text null,
	constraint uq_alias unique(gp, alias),
	foreign key (id_service) references service(id),
	foreign key (id_machine) references machine(id)
);
create table caller (
	id integer primary key,
	caller text not null,
  pre text null,
  post text null,
  workdir null,
  tag text null,
  description text null
);
create table serie (
id integer primary key,
title text not null,
description text not null,
id_capture int not null,
capture_mode text not null
);
create table capture_sysbench_db (
	id integer primary key,
	id_caller integer not null,
	id_setup integer not null,
  capture_ts date not null,
  capture_error text not null,
	sql_read integer not null,
	sql_write integer not null,
	sql_other integer not null,
	sql_total integer not null,
	sql_transactions integer not null,
	sql_queries integer not null,
	sql_ignored_errors integer not null,
	sql_reconnects integer not null,
	total_time real not null,
	total_events int not null,
	latency_min real not null,
	latency_avg real not null,
	latency_max real not null,
	latency_95 real not null,
	latency_sum real not null,
	fair_events_avg real not null,
	fair_events_std real not null,
	fair_time_avg real not null,
	fair_time_std real not null,
	foreign key (id_caller) references caller(id)
	foreign key (id_setup) references setup(id)
);
CREATE TABLE capture_gnu_time (
id integer primary key,
id_caller integer not null,
id_setup integer not null,
id_endpoint integer null,
capture_ts date not null,
time_real real not null,
time_cpu_kernel real not null,
time_cpu_user real not null,
pct_cpu real not null,
page_faults integer not null,
swap_outs integer not null,
context_waits integer not null,
context_other integer not null,
page_faults_minor integer not null,
sock_recv integer not null,
sock_sent integer not null,
signals_recv integer not null,
cmd_exit integer not null,
fs_inputs integer not null,
fs_outputs integer not null,
foreign key (id_caller) references caller(id)
foreign key (id_setup) references setup(id)
foreign key (id_endpoint) references endpoint(id)
);

create view captures
as
select
'gnu_time' as capture,
b.id,
b.capture_ts,
s.gp,
s.alias,
s.description,
e.endpoint
from capture_gnu_time b
inner join caller c on c.id=b.id_caller
inner join setup s on s.id=b.id_setup
left join endpoint e on e.id=b.id_endpoint
;

create view capture_gnu_time_full as
select	
s.gp,
s.alias,
s.description as description_setup,
e.endpoint,
c.*,
b.*
from capture_gnu_time b
inner join caller c on c.id=b.id_caller
inner join setup s on s.id=b.id_setupcreate view capture_gnu_time_full as
select	
s.gp,
s.alias,
s.description as description_setup,
e.endpoint,
c.*,
b.*
from capture_gnu_time b
inner join caller c on c.id=b.id_caller
inner join setup s on s.id=b.id_setup
left join endpoint e on e.id=b.id_endpoint;create view capture_gnu_time_full as
select	
s.gp,
s.alias,
s.description as description_setup,
e.endpoint,
c.*,
b.*
from capture_gnu_time b
inner join caller c on c.id=b.id_caller
inner join setup s on s.id=b.id_setup
left join endpoint e on e.id=b.id_endpoint;
left join endpoint e on e.id=b.id_endpoint;
